afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId releaseGroupId
                artifactId releaseArtifactId
                version releaseVersion

                // Ensure that the release AAR is built before publishing
                artifact("${project.buildDir}/outputs/aar/${project.name}-release.aar") {
                    builtBy tasks.named('assembleRelease') // Ensure .aar is built before publishing
                    extension "aar"
                }

                pom.withXml {
                    def pomXml = asNode()
                    pomXml.appendNode('name', releaseName)
                    pomXml.appendNode('description', releaseDescription)
                    def dependencies = pomXml.appendNode('dependencies')

                    configurations.getByName('releaseCompileClasspath').getResolvedConfiguration().getFirstLevelModuleDependencies().each {
                        if (it.moduleGroup == rootProject.name) {
                            def moduleNameMapToArtifact = [
                                    "fetch2": "xfetch2",
                                    "fetch2core": "xfetch2core",
                                    "fetch2fileserver": "xfetch2fileserver",
                                    "fetch2okhttp": "xfetch2okhttp",
                                    "fetch2rx": "xfetch2rx",
                                    "fetchmigrator": "xfetchmigrator"
                            ]
                            def moduleArtifactMapToGroupId = [
                                    "xfetch2": "androidx.tonyodev.fetch2",
                                    "xfetch2core": "androidx.tonyodev.fetch2core",
                                    "fetch2fileserver": "androidx.tonyodev.fetch2fileserver",
                                    "fetch2okhttp": "androidx.tonyodev.fetch2okhttp",
                                    "fetch2rx": "androidx.tonyodev.fetch2rx",
                                    "xfetchmigrator": "androidx.tonyodev.fetchmigrator"
                            ]
                            def realArtifactId = moduleNameMapToArtifact[it.moduleName]
                            def realGroupId = moduleArtifactMapToGroupId[realArtifactId]
                            def dependency = dependencies.appendNode('dependency')
                            dependency.appendNode('groupId', realGroupId)
                            dependency.appendNode('artifactId', realArtifactId)
                            dependency.appendNode('version', releaseVersion)
                        } else {
                            def dependency = dependencies.appendNode('dependency')
                            dependency.appendNode('groupId', it.moduleGroup)
                            dependency.appendNode('artifactId', it.moduleName)
                            dependency.appendNode('version', it.moduleVersion)
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                name releaseName
                url rootProject.ext.mavenRepo
                credentials {
                    username rootProject.ext.mavenUser
                    password rootProject.ext.mavenPassword
                }
            }
        }
    }
}
